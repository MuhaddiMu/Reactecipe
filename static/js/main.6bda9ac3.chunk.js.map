{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","Recipe","map","Rcp","key","recipe_id","src","image_url","alt","title","substring","publisher","to","API_KEY","App","state","Event","a","preventDefault","RecipeName","target","elements","value","fetch","API_CALL","json","DATA","setState","recipes","console","log","componentDidMount","localStorage","getItem","RecipesLocalStorage","JSON","parse","componentDidUpdate","stringify","setItem","Fragment","this","React","Component","ActiveRcp","RcpID","match","params","ID","recipe","length","href","publisher_url","Router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bda9ac3.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Form = props => (\n  <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\n    <input className=\"form__input\" type=\"text\" name=\"RecipeName\" />\n\n    <button className=\"form__button\">Search</button>\n  </form>\n)\n\nexport default Form\n","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nconst Recipes = props => (\n  <div className=\"container\">\n    <div className=\"row\">\n      {props.Recipe.map(Rcp => {\n        return (\n          <div key={Rcp.recipe_id} className=\"col-md-4 mb-2\">\n            <div className=\"recipes__box\">\n              <img\n                className=\"recipe__box-img\"\n                src={Rcp.image_url}\n                alt={Rcp.title}\n              />\n              <div className=\"recipe__text\">\n                <h5 className=\"recipe__title\">\n                  {Rcp.title < 20\n                    ? `${Rcp.title}`\n                    : `${Rcp.title.substring(0, 30)}...`}\n                </h5>\n                <p className=\"recipe__subtitle\">\n                  Publisher: <span>{Rcp.publisher}</span>\n                </p>\n              </div>\n              <button className=\"recipe_buttons\">\n                <Link to={`/Recipe/${Rcp.recipe_id}`}>View Recipe</Link>\n              </button>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  </div>\n)\n\nexport default Recipes\n","import React from \"react\"\nimport \"./App.css\"\nimport Form from \"./components/Form\"\nimport Recipes from \"./components/Recipes\"\n\nconst API_KEY = \"c4f5fd7eb6daa62deece925aa42c0a29\" //Taken From GitHub\n\nclass App extends React.Component {\n  state = {\n    Recipes: []\n  }\n\n  getRecipe = async Event => {\n    Event.preventDefault()\n\n    const RecipeName = Event.target.elements.RecipeName.value\n\n    const API_CALL = await fetch(\n      `https://www.food2fork.com/api/search?key=${API_KEY}&q=${RecipeName}`\n    )\n\n    const DATA = await API_CALL.json()\n\n    this.setState({ Recipes: DATA.recipes })\n    console.log(this.state.Recipes)\n  }\n  componentDidMount = () => {\n    if (localStorage.getItem(\"Recipes\") !== null) {\n      const RecipesLocalStorage = localStorage.getItem(\"Recipes\")\n      const Recipes = JSON.parse(RecipesLocalStorage)\n\n      this.setState({ Recipes: Recipes })\n    }\n  }\n\n  componentDidUpdate = () => {\n    const Recipes = JSON.stringify(this.state.Recipes)\n    localStorage.setItem(\"Recipes\", Recipes)\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Recipe Search</h1>\n          </header>\n          <Form getRecipe={this.getRecipe} />\n          <Recipes Recipe={this.state.Recipes} />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nconst API_KEY = \"c4f5fd7eb6daa62deece925aa42c0a29\"\n\nclass Recipe extends React.Component {\n  state = {\n    ActiveRcp: []\n  }\n\n  componentDidMount = async () => {\n    const RcpID = this.props.match.params.ID\n\n    const API_CALL = await fetch(\n      `https://www.food2fork.com/api/get?key=${API_KEY}&rId=${RcpID}`\n    )\n\n    const DATA = await API_CALL.json()\n\n    this.setState({ ActiveRcp: DATA.recipe })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.ActiveRcp.length !== 0 && (\n          <div className=\"active-recipe mt-3 mb-3\">\n            <img\n              className=\"active-recipe__img\"\n              src={this.state.ActiveRcp.image_url}\n              alt={this.state.ActiveRcp.title}\n            />\n\n            <h3 className=\"active-recipe__title\">\n              {this.state.ActiveRcp.title}\n            </h3>\n            <h4 className=\"active-recipe__publisher\">\n              Publisher: <span>{this.state.ActiveRcp.publisher}</span>\n            </h4>\n            <p className=\"active-recipe__website\">\n              Website:{\" \"}\n              <span>\n                <a href={this.state.ActiveRcp.publisher_url}>\n                  {this.state.ActiveRcp.publisher_url}\n                </a>\n              </span>\n            </p>\n            <button className=\"active-recipe__button\">\n              <Link to=\"/\">Go Back</Link>\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Recipe\n","import React from \"react\"\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\nimport App from \"../App\"\nimport Recipe from \"./Recipe\"\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" exact component={App}></Route>\n      <Route path=\"/Recipe/:ID\" component={Recipe}></Route>\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Router\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Router from \"./components/Router\"\n\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<Router />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}